<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html lang="ja" xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
  <head>
    <meta charset="UTF-8" />
    <title>GenerateTOC</title>
    <meta name="author" content="SENOO, Ken" />
    <script>
      <![CDATA[
      function GenerateTOC() {
        /**
        ## 方針
        1. まず変換元HTMLテキストを取得
        2. HTMLテキストをパース。
        * section>h1-h6を取得
        * 2番目のsectionの直前に<nav><h?>Table of Contents</h?><ol><li></li></ol></nav>
         * section>h1-h6のidに"日付_h1-h6の値"を設定
          \warning h1-h6要素に二重引用符"が使われていると，目次のリンクのエスケープができず，うまく機能しない。id属性はうまくエスケープできている。
        */

        // Get HTML document as DOM
        var value = document.getElementById("input").value;
        var view  = document.getElementById("view");
        view.innerHTML = value;

        // Generate TOC
        var root = document.getElementById("view");

        var first_heading = root.querySelectorAll("h1, h2, h3, h4, h5, h6")[1];
        first_heading = first_heading.tagName.toLowerCase();

        var toc = '<nav>\n';
        toc += "<"  + first_heading + ">Table of Contents";
        toc += "</" + first_heading + ">";
        nav = create_toc(root.children);
        // Remove title headings
        nav = nav.replace(/^[\s\S]*?<ol>[\s\S]*?<ol>/, "<ol>");
        nav = nav.replace(/\n<\/li>$/, "");  // Delete trailing li
        nav = nav.replace(/<\/li>\n<\/ol>$/, "");
        toc += nav;
        toc += "\n</nav>\n";

        // Insert nav to source HTML
        var nav = document.createElement("nav");
        insert = root.querySelectorAll("section")[1];
        insert.insertAdjacentHTML("beforeBegin", toc);

        // Output
        var output = document.getElementById("output");
        output.innerHTML = escape_html(root.innerHTML);

        // Preview  result
        var value = document.getElementById("output").value;
        var view  = document.getElementById("view");
        view.innerHTML = value;
      }

      function create_toc(children){
        var toc = "";
        // Date prefix for YYYYMMDDThhmm format
        var date = new Date();
        var now = date.toISOString().replace(/-|T.*/g, "");
        now += "T" + date.getHours() + date.getMinutes();

        for (let node of children){
          tag_name = node.tagName.toLowerCase();
          if (tag_name.match(/h[1-6]/)){
            let id = now + "_" + node.textContent;
            // エスケープ処理が面倒なので{}"は削除
            id = id.replace(/\s/g, "-").replace(/[{}"]/g, "");

            toc += '\n<li><a href="#' + id + '">' + node.textContent + '</a></li>';
            node.id = id;
          } else if (tag_name === "section"){
            toc += "\n<ol>";
            toc += create_toc(node.children);
            toc += "\n</ol>\n</li>";
          }
        }

        toc = toc.replace(/<\/ol>\n<\/li>\n<ol>\n/g, "");
        toc = toc.replace(/<\/li>\n<ol>/g, "\n<ol>");
        return toc;
      }

// http://qiita.com/saekis/items/c2b41cd8940923863791
function escape_html (string) {
  if(typeof string !== 'string') {
    return string;
  }
  return string.replace(/[&'`"<>]/g, function(match) {
    return {
      '&': '&amp;',
      "'": '&#x27;',
      '`': '&#x60;',
      '"': '&quot;',
      '<': '&lt;',
      '>': '&gt;',
    }[match]
  });
}
      ]]>
    </script>
    <style>
@charset "UTF-8";

/** caption */
caption::before {
  counter-increment: table;
  content: "表" counter(heading1) "." counter(table) " ";
}
figcaption::before {
  counter-increment: figure;
  content: "図" counter(heading1) "." counter(figure) " ";
}

figure pre~figcaption::before {
  counter-increment: listing;
  content: "リスト" counter(heading1) "." counter(listing) " ";
}
figure blockquote~figcaption::before {
  content: "—";
}

/* list */
/* listが見出し設定の後にあると見出し番号がリセットされる? */
/* ol { counter-reset: enum; } */
/* ol li { list-style-type: none; } */
/* ol li::before {                    */
/* counter-increment: enum;           */
/* content: counters(enum, ".") ". "; */
/* }                                  */
ol {
  counter-reset: enum1;
  padding-left: 1em;
}
ol>li {
  list-style-type: none;
  padding-left: 1em;
  text-indent: -1em;
}
ol>li::before {
  counter-increment: enum1;
  content: counter(enum1) ". ";
}
ol>li>ol{
  counter-reset: enum2;
  padding-left: 1em;
  text-indent: -1em;
}
ol>li>ol>li::before {
  counter-increment: enum2;
  content: counter(enum1) "." counter(enum2) ". ";
}
ol>li>ol>li>ol{
  counter-reset: enum3;
  padding-left: 1em;
  text-indent: -1em;
}
ol>li>ol>li>ol>li::before {
  counter-increment: enum3;
  content: counter(enum1) "." counter(enum2) "." counter(enum3) ". ";
}
ol>li>ol>li>ol>li>ol{
  counter-reset: enum4;
  padding-left: 1em;
  text-indent: -1em;
}
ol>li>ol>li>ol>li>ol>li::before {
  counter-increment: enum4;
  content: counter(enum1) "." counter(enum2) "." counter(enum3) "." counter(enum4) ". ";
}
ol>li>ol>li>ol>li>ol>li>ol{
  counter-reset: enum5;
  padding-left: 1em;
  text-indent: -1em;
}
ol>li>ol>li>ol>li>ol>li>ol>li::before {
  counter-increment: enum5;
  content: counter(enum1) "." counter(enum2) "." counter(enum3) "." counter(enum4) "." counter(enum5) ". ";
}
ol>li>ol>li>ol>li>ol>li>ol>li>ol{
  counter-reset: enum6;
  padding-left: 1em;
  text-indent: -1em;
}
ol>li>ol>li>ol>li>ol>li>ol>li>ol>li::before {
  counter-increment: enum6;
  content: counter(enum1) "." counter(enum2) "." counter(enum3) "." counter(enum4) "." counter(enum5) "." counter(enum6) ". ";
}


/* title */
body>h1:first-of-type {
  text-align: center;
  font-size: xx-large;
}

/* 節番号の設定 */
body { counter-reset: heading1; }

/** article要素の見出しでカウンターをリセット */
/* article要素はそんなに入れ子にならないから最上位の見出しだけリセット */
article>h1:first-of-type,
article>h2:first-of-type,
article>h3:first-of-type,
article>h4:first-of-type,
article>h5:first-of-type,
article>h6:first-of-type
{
  counter-reset: heading1;
  font-size: 2.17em;
}

section>h1:first-of-type,
section>h2:first-of-type,
section>h3:first-of-type,
section>h4:first-of-type,
section>h5:first-of-type,
section>h6:first-of-type
{
  counter-increment: heading1; counter-reset: heading2 table figure listing;
  font-size: 2.0em;
}

section>h1:first-of-type::before,
section>h2:first-of-type::before,
section>h3:first-of-type::before,
section>h4:first-of-type::before,
section>h5:first-of-type::before,
section>h6:first-of-type::before
{
  content: counter(heading1) " ";
}

section>section>h1:first-of-type,
section>section>h2:first-of-type,
section>section>h3:first-of-type,
section>section>h4:first-of-type,
section>section>h5:first-of-type,
section>section>h6:first-of-type
{
  counter-increment: heading2; counter-reset: heading3;
  font-size: 1.83em;
}
section>section>h1:first-of-type::before,
section>section>h2:first-of-type::before,
section>section>h3:first-of-type::before,
section>section>h4:first-of-type::before,
section>section>h5:first-of-type::before,
section>section>h6:first-of-type::before
{
  content: counter(heading1) "." counter(heading2) " ";
}

section>section>section>h1:first-of-type,
section>section>section>h2:first-of-type,
section>section>section>h3:first-of-type,
section>section>section>h4:first-of-type,
section>section>section>h5:first-of-type,
section>section>section>h6:first-of-type
{
  counter-increment: heading3; counter-reset: heading4;
  font-size: 1.67em;
}
section>section>section>h1:first-of-type::before,
section>section>section>h2:first-of-type::before,
section>section>section>h3:first-of-type::before,
section>section>section>h4:first-of-type::before,
section>section>section>h5:first-of-type::before,
section>section>section>h6:first-of-type::before
{
  content: counter(heading1) "." counter(heading2) "." counter(heading3) " ";
}

section>section>section>section>h1:first-of-type,
section>section>section>section>h2:first-of-type,
section>section>section>section>h3:first-of-type,
section>section>section>section>h4:first-of-type,
section>section>section>section>h5:first-of-type,
section>section>section>section>h6:first-of-type
{
  counter-increment: heading4; counter-reset: heading5;
  font-size: 1.50em;
}
section>section>section>section>h1:first-of-type::before,
section>section>section>section>h2:first-of-type::before,
section>section>section>section>h3:first-of-type::before,
section>section>section>section>h4:first-of-type::before,
section>section>section>section>h5:first-of-type::before,
section>section>section>section>h6:first-of-type::before
{
  content: counter(heading1) "." counter(heading2) "." counter(heading3) "."
           counter(heading4) " ";
}

section>section>section>section>section>h1:first-of-type,
section>section>section>section>section>h2:first-of-type,
section>section>section>section>section>h3:first-of-type,
section>section>section>section>section>h4:first-of-type,
section>section>section>section>section>h5:first-of-type,
section>section>section>section>section>h6:first-of-type
{
  counter-increment: heading5; counter-reset: heading6;
  font-size: 1.33em;
}
section>section>section>section>section>h1:first-of-type::before,
section>section>section>section>section>h2:first-of-type::before,
section>section>section>section>section>h3:first-of-type::before,
section>section>section>section>section>h4:first-of-type::before,
section>section>section>section>section>h5:first-of-type::before,
section>section>section>section>section>h6:first-of-type::before
{
  content: counter(heading1) "." counter(heading2) "." counter(heading3) "."
           counter(heading4) "." counter(heading5) " ";
}
/** heading6 だけカウンターが増えない？ */
section>section>section>section>section>section>h1:first-of-type,
section>section>section>section>section>section>h2:first-of-type,
section>section>section>section>section>section>h3:first-of-type,
section>section>section>section>section>section>h4:first-of-type,
section>section>section>section>section>section>h5:first-of-type,
section>section>section>section>section>section>h6:first-of-type
{
  /* 使っていなくてもheading7をリセットしないとheading6が増えないっぽい */
  counter-increment: heading6; counter-reset: heading7;
  font-size: 1.17em;
}
section>section>section>section>section>section>h1:first-of-type::before,
section>section>section>section>section>section>h2:first-of-type::before,
section>section>section>section>section>section>h3:first-of-type::before,
section>section>section>section>section>section>h4:first-of-type::before,
section>section>section>section>section>section>h5:first-of-type::before,
section>section>section>section>section>section>h6:first-of-type::before
{
  content: counter(heading1) "." counter(heading2) "." counter(heading3) "."
           counter(heading4) "." counter(heading5) "." counter(heading6) " ";
}


/** Table */
table {
  border-collapse: collapse;
  border: none;
  /** centering **/
  margin-left: auto;
  margin-right: auto;
}
/** Table color **/
tbody>tr:nth-of-type(even) {
  background: #ffffaa;
}
thead>tr>th {
  background: #ffcc99;
  text-align: center;
  font-weight: bold
}
/** Column margin **/
td {
  padding-left: 0.5em;
  padding-right: 0.5em;
}
/** Table border **/
td, th {
  border-style: none;
}

thead>tr:first-of-type {
  border-top-style: solid;
  border-top-width: medium;
}
thead>tr:last-of-type {
  border-bottom-style: solid;
  border-bottom-width: thin;
}
tbody>tr:first-of-type {
  border-top-style: solid;
  border-top-width: thin;
}
tbody>tr:last-of-type {
  border-bottom-style: solid;
  border-bottom-width: medium;
}

th, td {
  word-wrap: break-all;
}

/** Cross reference */
[href^="#chap:"]::before {
  content: "第";
}
[href^="#chap:"]::after {
  content: "章";
}
[href^="#sec:"]::after, [href^="#sub"]::after {
  content: "節";
}
[href^="#par:"]::after {
  content: "段落";
}
[href^="#enu:"]::before {
  content: "項目";
}
[href^="#eq:"]::before {
  content: "式(";
}
[href^="#eq:"]::after {
  content: ")";
}
[href^="#fig:"]::before {
  content: "図";
}
[href^="#tab:"]::before {
  content: "表";
}
[href^="#lis:"]::before {
  content: "リスト";
}

/** Font */
p {text-indent: 1em;}
h1, h2, h3, h4, h5, h6 {
  font-family: "TeX Gyre Heros", "Migu 1P", "TakaoGothic", "VL Gothic", "Yu Gothic", "Meiryo UI", sans-serif;
  font-weight: bold;
  /* orange */
  /* background-color: rgb(100%,80%,0%); */
  background-color: #e6e6ff;
  margin-top: 0em;
  margin-bottom: 0em;
}
em, strong {
  color: red;
  font-weight: bold;
}
strong {background-color: yellow;}

/** PC */
kbd, code, samp, var {
  font-family: "Migu 1M", "Inconsolata", "DejaVu Sans Mono", "Consolas", "TakaoGothic", "VL Gothic", "HGGothicM", "MS Gothic",  monospace;
  border-width: thin;
  border-style: solid;
  border-color: #cccccc;
  border-radius: 5px;
}
kbd {
  background-color: #ffe6e6;
}
code {
  background-color: #e6ffe6;
}
samp {
  background-color: #e6e6e6;
}
var {
  background-color: #e6ffff;
}
pre {
  font-family: "Migu 1M", "Inconsolata", "DejaVu Sans Mono", "Consolas", "TakaoGothic", "VL Gothic", "HGGothicM", "MS Gothic",  monospace;
  background-color: #ffffe6;
  overflow: auto;
}

/** Line number for source code */
pre>code, pre>samp {
  display: block;
  border-style: none;
  position: relative;
  padding-left: 3em;
  overflow-x: auto;
}

pre>code::before, pre>samp::before {
  content: "   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100";
  display: block;
  width: 2.5em;
  height: 100%;
  position: absolute;
  left: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
  word-break: break-all;
  overflow-y: hidden;
  border-right: 1px solid;
}

/** Blockquote */
blockquote {
  background-color: #eee;
  padding: 1.0em;
  padding-left: 3em;
  position: relative;
}
blockquote::before {
  content: "“";
  font-size: 600%;
  line-height: 1em;
  font-family: serif;
  color: #999;
  position: absolute;
  left: 0;
  top: 0;
}
blockquote p {
  margin: 0;
}

/** Description element */
dt {
  font-weight: bold;
  font-family: sans-serif;
  padding-left: 0.5em;
}
dt, dd {
  line-height: 1.5em;
  word-wrap: break-word;
}

dt {
  float: left;
  width: 20%;
}
dd {
  margin-left: 22%;
}
dd::after {
  content: "";
  display: block;
  clear: both;
}

/** figure */
figure {
  text-align: center;
}

figure blockquote~figcaption {
  text-align: right;
}
figure blockquote {
  text-align: left;
}
figure pre {
  text-align: left;
}
figure>dl {
  border-radius: 0.4em;
  border: solid  thin rgb(10%,10%,10%);
  background-color: rgb(90%,90%,90%);
  text-align: left;
}
figure>dl>dt {
  display: block;
  width: 100%;
  border-top-left-radius: 0.2em;
  border-top-right-radius: 0.2em;
  color: white;
  background-color: rgb(30%,30%,30%);
  box-sizing: border-box;
}
figure>dl>dd {
  padding-left: 0.5em;
  margin: auto;
}
figure>dl>dd:nth-of-type(n+2) {
  border-top-style: dashed;
  border-top-width: thin;
}
.column-2 {
  width: 45%;
  display: inline-block;
  vertical-align: top;
  margin-left: 1em;
  margin-right: 1em;
}
    </style>
  </head>
  <body>
    <h1>GenerateTOC</h1>
    <main>
      <p>HTML5の文章から明示的なセクション（<code>section&gt;h1-h6</code>）を抽出して目次を作成する。</p>
      <p>単独ではXHTMLに変換できないので以下のサイトでXHTMLに変換する。
      </p>
      <p><a href="http://www.csgnetwork.com/cvthtml2xhtml.html">HTML To XHTML Code Converter</a></p>
      <p>いくつか問題点がある。</p>
      <ul>
        <li>文字実態参照がうまく解釈できない。&lt;hoge&gt;みたいなのが，勝手に要素になってしまう。</li>
        <li>h1-h6要素に二重引用符"が使われていると，目次のリンクのエスケープができずうまく機能しない。</li>
      </ul>
      <form>
        <fieldset>
          <legend>変換元HTML</legend>
          <textarea id="input" placeholder="ここに記入してね。" style="width: 100%; height: 10em;">
        <section>
          <h3><a id="mozTocId931479" class="mozTocH3"></a>How to match grep command for all files including hidden files</h3>
          <p><code>grep</code>コマンドでドット（.）で始まる隠しファイルを含む全ファイルを検索対象にするには，以下のどれかの書式を使う。</p>
          <pre><code>grep -r "pattern" .[!.]* *<br />grep -r "pattern" .* * --exlucde-dir=..<br />## for bash dotglob and zsh glob_dots option enabled<br />grep -r "pattern" .[!.]* [!.]*<br />grep -r "pattern" * --exclude-dir=..</code></pre>
          <section>
            <h4><a id="mozTocId5597" class="mozTocH4"></a>Introduction</h4>
          </section>
          <p>ファイル内の文字列を検索するgrepコマンドをよく使う。ファイル名のパターンマッチであるglobを活用し，ワイルドカードの<code>*</code>と組み合わせて大量のファイルから文字列を検索できる。</p>
          <p>しかし，globの<code>*</code>では<code>.</code>から始まる隠しファイルは検索対象にならない。つまり，以下ではドット（<code>.</code>）から始まる<code>.foo</code>，<code>.baz/baz</code>，<code>.baz/.baz</code>は検索にヒットしない。</p>
          <pre><code>mkdir -p bar .baz<br />echo "1. file dot"             &gt;  foo<br />echo "2. file dot foo"         &gt; .foo<br />echo "3. file bar/dot bar"     &gt;  bar/bar<br />echo "4. file bar/dot bar"     &gt;  bar/.bar<br />echo "5. file dot baz/baz"     &gt; .baz/baz<br />echo "6. file dot baz/dot baz" &gt; .baz/.baz</code></pre>
          <pre><code>grep -r "file" *</code></pre>
          <pre><samp>bar/bar:3. file bar/dot bar
bar/.bar:4. file bar/dot bar
foo:1. file dot
</samp></pre>
          <p>globの<code>*</code>でこれらの隠しファイルにマッチさせる方法は2通りある。</p>
          <ol>
            <li><a href="#%E3%82%B7%E3%82%A7%E3%83%AB%E6%A9%9F%E8%83%BD%E3%82%92%E6%B4%BB%E7%94%A8">bashの<code>dotglob</code>やzshの<code>glob_dots</code>などシェル機能を活用。</a></li>
            <li><a href="#%E3%83%AF%E3%82%A4%E3%83%AB%E3%83%89%E3%82%AB%E3%83%BC%E3%83%89%E3%82%92%E9%A7%86%E4%BD%BF">ワイルドカードを駆使。</a></li>
          </ol>
          <section>
            <h4><a id="mozTocId41902" class="mozTocH4"></a>grepの隠しファイルへのマッチ方法</h4>
            <section>
              <h5 id="シェル機能を活用"><a id="mozTocId254935" class="mozTocH5"></a>シェル機能を活用</h5>
              <p>bashとzshでは，ドット（.）から始まる隠しファイルにもglobの<code>*</code>がマッチできるようにするオプションがある。</p>
              <p>以下のコマンドで機能をオンにできる。</p>
              <pre><code>## bash (~/.bashrc)<br />shopt -s dotglob<br /><br />## zsh (~/.zshrc)<br />setopt glob_dots</code></pre>
              <pre><code>grep -r "file" *</code></pre>
              <pre><samp>.baz/baz:5. file dot baz/baz
.baz/.baz:6. file dot baz/dot baz
.foo:2. file dot foo
bar/bar:3. file bar/dot bar
bar/.bar:4. file bar/dot bar
foo:1. file dot</samp></pre>
              <p>ただ，これらの機能を設定ファイルで有効にしておくと，ターミナルからコマンドを入力したり，シェルスクリプトにも影響を与えるリスクがある。そのため，あまりこれらの機能を前提にしないほうがよいだろう。</p>
            </section>
            <section>
              <h5 id="ワイルドカードを駆使"><a id="mozTocId960159" class="mozTocH5"></a>ワイルドカードを駆使</h5>
              <p>シェルの設定に頼らずともワイルドカードを駆使すれば隠しファイルも検索対象に含めることはできる。例えば，<code>.</code>から始まるファイルは以下でマッチする。</p>
              <pre><code>grep -r "file" .*</code></pre>
              <p>しかし，上記コマンドは以下2点の理由から実行しないほうがいい。</p>
              <ol>
                <li><code>.*</code>は1階層上のディレクトリを意味する<code>..</code>にもマッチし，<strong>ファイルシステム全体を再帰的に検索</strong>してしまう。</li>
                <li>隠しファイル以外のファイルにマッチしない。</li>
              </ol>
              <p>この2点をカバーするには，以下のように入力する。</p>
              <pre><code>grep -r "file" .[!.]* *</code></pre>
              <p>仕組みは以下のとおりだ。</p>
              <ol>
                <li>最初の<code>.[!.]*</code>で<code>..</code>を除く，<code>.</code>で始まる隠しファイルを検索対象とする。</li>
                <li>最後の<code>*</code>で<code>.</code>で始まらないファイル（通常のglobの<code>*</code>の動作）を検索対象とする。</li>
              </ol>
              <p>なお，前述の<code>..</code>にマッチしてしまい，ファイルシステム全体を再帰的に検索することを回避するためにはgrepの<code>--exclude-dir</code>オプションで<code>..</code>を指定してもよい。</p><pre><code>grep -r "file" .* * --exclude-dir=..</code></pre>
            </section>
          </section>
          <section>
            <h4><a id="mozTocId728601" class="mozTocH4"></a>トラブルシューティング</h4>
            <section>
              <h5><a id="mozTocId133284" class="mozTocH5"></a>bashのdotglobとzshのglob_dots有効時の不具合</h5>
              <p>grepでは検索対象を何回も指定できるが，間違えるとその分重複も発生するので注意する。つまり，ここでbashの<code>dotglob</code>のやzshの<code>glob_dots</code>を有効にしていると不都合が起きる。これらの機能を有効にすると，<code>*</code>が隠しファイルにもマッチするので，<code>.</code>で始まる隠しファイルが<em>2回マッチ</em>してしまう。</p>
              <p>例えば，以下の<code>.a.dat</code>ファイルには2回ヒットする。</p>
              <pre><code>bash<br />shopt -s dotglob<br /><br />echo "return" &gt; .a.dat<br />grep -r "return" .[!.]* *</code></pre>
              <pre><samp>.a.dat:return<br />.a.dat:return</samp></pre>
              <p>これを避けるには，grepの最後の<code>*</code>で隠しファイルを明示的に除外する。</p>
              <pre><code>grep -r "return" .[!.]* [!.]*</code></pre>
              <pre><samp>.a.dat:return</samp></pre>
              <p>補足だが，grepでは<code>-e</code>オプションで一度に複数のキーワードを検索（OR検索）できる。</p>
              <pre><code>grep -r -e "pattern1" .[!.]* * -e "pattern2"</code></pre>
            </section>
            <section>
              <h5><a id="mozTocId179100" class="mozTocH5"></a>POSIXでの<code>[^...]</code>は未定義</h5>
              <p>当初，以下の様にglobでのパターンマッチングに<code>!</code>ではなく<code>^</code>を使っていた。bashとzshでは動作したが，<code>sh</code>でうまく動作しなかった。</p>
              <pre><code>grep -r "file" .[^.]* [^.]*</code></pre>
              <p>気になって確認したところ，POSIXではワイルドカードにおける開き角括弧<code>[</code>の開始のサーカムフレックス<code>^</code>の動作（<code>[^...]</code>）は未定義のようなので，使用を控えたほうがよいだろう。</p>
              <blockquote>
                <p>A bracket expression starting with an unquoted &lt;circumflex&gt; character produces unspecified results. </p>
                <p> <cite><a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_13_01">Shell Command Language</a></cite> </p>
              </blockquote>
            </section>
          </section>
          <section>
            <h4><a id="mozTocId441596" class="mozTocH4"></a>まとめ</h4>
            <p>元々はVimでのgrep検索について調べていたのだが，気づいたらgrep検索についてはまってしまっていた。時間を余計に使ってしまったが，POSIXの仕様も確認できて勉強になった。</p>
            <p>冒頭でも記載した通り，現在ディレクトリ以下の隠しファイルを含む全ファイルを対象に検索したければ，以下のどちらかの書式を使う。</p>
            <pre><code>grep -r "pattern" .[!.]* *<br />## for bash dotglob and zsh glob_dots option enabled<br />grep -r "pattern" .[!.]* [!.]*</code></pre>
            <p>2番目の書式の方がbashの<code>dotglob</code>とzshの<code>glob_dots</code>オプションに依存しないので，より確実だが，これらのオプションを考慮するのはやりすぎなような気もする。お好みで選べばよいだろう。</p>
            <p>参考： </p>
            <blockquote data-lang="ja" class="twitter-tweet">
              <p lang="ja" dir="ltr">.<a href="https://twitter.com/senopen">@senopen</a> grepで一回で隠しファイルも含めて全てのファイルを検索対象にする方法を思いついた。<br />
                grep -r hoge .[^.]* [^.]*<br />
                ..を含むと再帰してとんでもないことになるので省かないといけない。<br />
                少し考えたらすぐに出てくるような内容だけどね。</p>
              — せのぺん (@senopen) <a href="https://twitter.com/senopen/status/735073026933284864">2016年5月24日</a></blockquote>
          </section>
        </section>
</textarea>
          <button type="button" onclick="GenerateTOC();">変換</button>
        </fieldset>
      </form>
      <form>
        <fieldset>
          <legend>変換後HTML</legend>
          <textarea id="output" placeholder="ここに表示される。" style="width: 100%; height: 10em;"></textarea>
        </fieldset>
      </form>
      <form>
        <fieldset>
          <legend>表示結果</legend>
          <output id="view"></output>
         </fieldset>
      </form>
    </main>
    <footer>
      <p> <small>Author: SENOO, Ken;  License: CC0; Created date: <time>2016-05-21</time></small></p>
    </footer>
  </body>
</html>
